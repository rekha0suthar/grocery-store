name: Development Workflow

on:
  push:
    branches: [ develop, feature/*, bugfix/* ]
  pull_request:
    branches: [ develop, main ]

env:
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies (Backend)
        if: contains(github.event.head_commit.modified, 'backend/') || contains(github.event.head_commit.added, 'backend/')
        run: |
          cd backend
          npm ci

      - name: Install dependencies (Frontend)
        if: contains(github.event.head_commit.modified, 'frontend/') || contains(github.event.head_commit.added, 'frontend/')
        run: |
          cd frontend
          npm ci

      - name: Run ESLint (Backend)
        if: contains(github.event.head_commit.modified, 'backend/') || contains(github.event.head_commit.added, 'backend/')
        run: |
          cd backend
          npm run lint || echo "Linting issues found"

      - name: Run ESLint (Frontend)
        if: contains(github.event.head_commit.modified, 'frontend/') || contains(github.event.head_commit.added, 'frontend/')
        run: |
          cd frontend
          npm run lint || echo "Linting issues found"

      - name: Run Prettier check
        run: |
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}" || echo "Formatting issues found"

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.project }}
          npm ci

      - name: Run tests
        run: |
          cd ${{ matrix.project }}
          npm test
        env:
          CI: true

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.project }}/coverage/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

  # Build Tests
  build-tests:
    name: Build Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.project }}
          npm ci

      - name: Build project
        run: |
          cd ${{ matrix.project }}
          npm run build || echo "No build script found"

  # Docker Build Tests
  docker-build-tests:
    name: Docker Build Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.project }}
          push: false
          tags: test-${{ matrix.project }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './frontend/.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Dependency Updates
  dependency-updates:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for updates (Backend)
        run: |
          cd backend
          npm outdated || echo "Some dependencies are outdated"

      - name: Check for updates (Frontend)
        run: |
          cd frontend
          npm outdated || echo "Some dependencies are outdated"

  # PR Summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [code-quality, unit-tests, build-tests, docker-build-tests, security-scan]
    
    steps:
      - name: Generate PR summary
        run: |
          echo "## ðŸš€ Development Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… Completed Checks:" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Tests: ${{ needs.build-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.docker-build-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“Š Overall Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
